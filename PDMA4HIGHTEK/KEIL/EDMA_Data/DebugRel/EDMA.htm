<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\EDMA_Data\DebugRel\EDMA.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\EDMA_Data\DebugRel\EDMA.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu Apr 13 14:17:26 2023
<BR><P>
<H3>Maximum Stack Usage =        316 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; sysSetDramClock &rArr; _dramClockSwitchStart &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[17]">Vector_Table</a>
 <LI><a href="#[a]">Reset_Go</a>
 <LI><a href="#[b]">Undefined_Handler</a>
 <LI><a href="#[c]">SWI_Handler1</a>
 <LI><a href="#[d]">Prefetch_Handler</a>
 <LI><a href="#[e]">Abort_Handler</a>
 <LI><a href="#[f]">IRQ_Handler</a>
 <LI><a href="#[10]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[29]">sys_flush_and_clean_dcache</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">sys_flush_and_clean_dcache</a><BR>
 <LI><a href="#[b]">Undefined_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">Undefined_Handler</a><BR>
 <LI><a href="#[c]">SWI_Handler1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SWI_Handler1</a><BR>
 <LI><a href="#[d]">Prefetch_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">Prefetch_Handler</a><BR>
 <LI><a href="#[e]">Abort_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">Abort_Handler</a><BR>
 <LI><a href="#[f]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">IRQ_Handler</a><BR>
 <LI><a href="#[10]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[e]">Abort_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[13]">DrvEDMA1_ISR</a> from drvedma.o(.text) referenced from drvedma.o(.text)
 <LI><a href="#[12]">DrvEDMA_ISR</a> from drvedma.o(.text) referenced from drvedma.o(.text)
 <LI><a href="#[10]">FIQ_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[f]">IRQ_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[3d]">PdmaCallback_SPI</a> from smpl_pdma_spi.o(.text) referenced 2 times from smpl_pdma_spi.o(.text)
 <LI><a href="#[d]">Prefetch_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[a]">Reset_Go</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[c]">SWI_Handler1</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[b]">Undefined_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[9]">WB_Interrupt_Shell</a> from wb_aic.o(.text) referenced 188 times from wb_aic.o(.data)
 <LI><a href="#[14]">_dramClockSwitch</a> from wb_config.o(.text) referenced from wb_config.o(.text)
 <LI><a href="#[a2]">_sysClockSwitch</a> from wb_config.o(.text) referenced from wb_config.o(.text)
 <LI><a href="#[11]">main</a> from main.o(.text) referenced from __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
 <LI><a href="#[5b]">spi0IRQHandler</a> from spi.o(.text) referenced from spi.o(.text)
 <LI><a href="#[5f]">spi1IRQHandler</a> from spi.o(.text) referenced from spi.o(.text)
 <LI><a href="#[9a]">sysFiqHandler</a> from wb_aic.o(.text) referenced from wb_aic.o(.text)
 <LI><a href="#[99]">sysIrqHandler</a> from wb_aic.o(.text) referenced from wb_aic.o(.text)
 <LI><a href="#[15]">sysTimerISR</a> from wb_timer.o(.text) referenced 2 times from wb_timer.o(.text)
 <LI><a href="#[16]">sysUartISR</a> from wb_uart.o(.text) referenced from wb_uart.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[17]"></a>Vector_Table</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Go
</UL>

<P><STRONG><a name="[a]"></a>Reset_Go</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[18]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Go
</UL>

<P><STRONG><a name="[19]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1b]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[d5]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[d6]"></a>__decompress</STRONG> (ARM, 92 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[d7]"></a>__decompress1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1c]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[d8]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[22]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via BLX)
</UL>

<P><STRONG><a name="[d9]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[1d]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[da]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[db]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[dc]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[dd]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[de]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[df]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[e0]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[e1]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[e2]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[e3]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[e4]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[e5]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[e6]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[e7]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[e8]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[e9]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[ea]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[26]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via BLX)
</UL>

<P><STRONG><a name="[ee]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[ef]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[f0]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[f1]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[f2]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[f3]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[f4]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[f5]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1a]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[f6]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[1f]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap &rArr; __user_initial_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[21]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[f7]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[23]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; exit
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[f8]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[ce]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BLX)
</UL>

<P><STRONG><a name="[25]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via BLX)
</UL>

<P><STRONG><a name="[f9]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[27]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[29]"></a>sys_flush_and_clean_dcache</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_cache.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableCache
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
</UL>

<P><STRONG><a name="[be]"></a>sysSetupCP15</STRONG> (ARM, 36 bytes, Stack size 0 bytes, wb_mmu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMMUTable
</UL>

<P><STRONG><a name="[fa]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[2a]"></a>spiInit</STRONG> (ARM, 264 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = spiInit &rArr; spiOpen &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetAPBClock
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiOpen
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIoctl
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11]"></a>main</STRONG> (ARM, 304 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = main &rArr; sysSetDramClock &rArr; _dramClockSwitchStart &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetTimerReferenceClock
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetCPUClock
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetAPBClock
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetChar
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableCache
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSlaveTest
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Init
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[3d]"></a>PdmaCallback_SPI</STRONG> (ARM, 32 bytes, Stack size 8 bytes, smpl_pdma_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = PdmaCallback_SPI &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpl_pdma_spi.o(.text)
</UL>
<P><STRONG><a name="[3e]"></a>initSPIPDMA_Write</STRONG> (ARM, 140 bytes, Stack size 16 bytes, smpl_pdma_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_FindandRequest
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetupSingle
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetupHandlers
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetWrapINTType
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetDirection
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetAPB
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadWrite
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAWrite
</UL>

<P><STRONG><a name="[45]"></a>initSPIPDMA_Read</STRONG> (ARM, 148 bytes, Stack size 16 bytes, smpl_pdma_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = initSPIPDMA_Read &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_FindandRequest
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetupSingle
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetupHandlers
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetWrapINTType
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetDirection
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetAPB
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadRead
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMARead
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSlaveTest
</UL>

<P><STRONG><a name="[46]"></a>spiFlashPDMAWrite</STRONG> (ARM, 592 bytes, Stack size 40 bytes, smpl_pdma_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite1
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusRead
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSetByteEndin
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIsBusy
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiEnable
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiDisable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Trigger
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Free
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPIPDMA_Write
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashTest
</UL>

<P><STRONG><a name="[52]"></a>spiFlashPDMARead</STRONG> (ARM, 480 bytes, Stack size 32 bytes, smpl_pdma_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite1
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusRead
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSetByteEndin
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiEnable
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiDisable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Trigger
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Free
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPIPDMA_Read
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashTest
</UL>

<P><STRONG><a name="[53]"></a>SPIFlashTest</STRONG> (ARM, 196 bytes, Stack size 24 bytes, smpl_pdma_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseAll
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMARead
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAWrite
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[56]"></a>spiFlashPDMAQuadWrite</STRONG> (ARM, 768 bytes, Stack size 40 bytes, smpl_pdma_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite1
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusRead
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSetByteEndin
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIsBusy
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiEnable
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiDisable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Trigger
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Free
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPIPDMA_Write
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashQuadTest
</UL>

<P><STRONG><a name="[57]"></a>spiFlashPDMAQuadRead</STRONG> (ARM, 524 bytes, Stack size 32 bytes, smpl_pdma_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite1
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusRead
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSetByteEndin
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiEnable
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiDisable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Trigger
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Free
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPIPDMA_Read
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashQuadTest
</UL>

<P><STRONG><a name="[58]"></a>SPIFlashQuadTest</STRONG> (ARM, 196 bytes, Stack size 24 bytes, smpl_pdma_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseAll
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadRead
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadWrite
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[3c]"></a>spiSlaveTest</STRONG> (ARM, 244 bytes, Stack size 24 bytes, smpl_pdma_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = spiSlaveTest &rArr; initSPIPDMA_Read &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSetByteEndin
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Trigger
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Free
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPIPDMA_Read
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28]"></a>_sys_exit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, standalone.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit (via BLX)
</UL>

<P><STRONG><a name="[d0]"></a>_ttywrch</STRONG> (ARM, 8 bytes, Stack size 0 bytes, standalone.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display (via BLX)
</UL>

<P><STRONG><a name="[cc]"></a>__user_initial_stackheap</STRONG> (ARM, 44 bytes, Stack size 32 bytes, standalone.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2b]"></a>spiActive</STRONG> (ARM, 112 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashExit4ByteMode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEnter4ByteMode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiEONFlashFastReadQuad
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiEONFlashQuadWrite
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashFastReadQuad
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashQuadWrite
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashWrite
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseBlock
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseSector
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashReset
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiEONQPIEnable
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite2
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteDisable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiReadID
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransfer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWrite
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRead
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite1
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusRead
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseAll
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadRead
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadWrite
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMARead
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAWrite
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInit
</UL>

<P><STRONG><a name="[fb]"></a>spiSetGo</STRONG> (ARM, 60 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>spiIsBusy</STRONG> (ARM, 40 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiClose
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadWrite
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAWrite
</UL>

<P><STRONG><a name="[4b]"></a>spiTxLen</STRONG> (ARM, 152 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashExit4ByteMode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEnter4ByteMode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiEONFlashFastReadQuad
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiEONFlashQuadWrite
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashFastReadQuad
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashQuadWrite
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashWrite
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseBlock
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseSector
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashReset
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiEONQPIEnable
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite2
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteDisable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiReadID
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWrite
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRead
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite1
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusRead
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseAll
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadRead
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadWrite
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMARead
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAWrite
</UL>

<P><STRONG><a name="[59]"></a>spiSetClock</STRONG> (ARM, 80 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spiSetClock &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIoctl
</UL>

<P><STRONG><a name="[4c]"></a>spiSetByteEndin</STRONG> (ARM, 120 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiEONFlashFastReadQuad
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiEONFlashQuadWrite
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashFastReadQuad
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashQuadWrite
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashWrite
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadRead
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadWrite
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMARead
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAWrite
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSlaveTest
</UL>

<P><STRONG><a name="[fc]"></a>spiEnableInt</STRONG> (ARM, 56 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>spiDisableInt</STRONG> (ARM, 56 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>spi0IRQHandler</STRONG> (ARM, 56 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi0IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>spi1IRQHandler</STRONG> (ARM, 56 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi1IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>spiInstallCallBack</STRONG> (ARM, 140 bytes, Stack size 16 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
</UL>

<P><STRONG><a name="[2e]"></a>spiOpen</STRONG> (ARM, 1328 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = spiOpen &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInit
</UL>

<P><STRONG><a name="[60]"></a>spiClose</STRONG> (ARM, 280 bytes, Stack size 16 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableInterrupt
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIsBusy
</UL>

<P><STRONG><a name="[2d]"></a>spiIoctl</STRONG> (ARM, 56 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spiIoctl &rArr; spiSetClock &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSetClock
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInit
</UL>

<P><STRONG><a name="[4a]"></a>spiEnable</STRONG> (ARM, 64 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadRead
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadWrite
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMARead
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAWrite
</UL>

<P><STRONG><a name="[50]"></a>spiDisable</STRONG> (ARM, 64 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadRead
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadWrite
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMARead
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAWrite
</UL>

<P><STRONG><a name="[62]"></a>spiRead</STRONG> (ARM, 440 bytes, Stack size 20 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>

<P><STRONG><a name="[63]"></a>spiWrite</STRONG> (ARM, 316 bytes, Stack size 20 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>

<P><STRONG><a name="[86]"></a>spiSSEnable</STRONG> (ARM, 196 bytes, Stack size 12 bytes, spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashExit4ByteMode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEnter4ByteMode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiEONFlashFastReadQuad
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiEONFlashQuadWrite
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashFastReadQuad
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashQuadWrite
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashWrite
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseBlock
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseSector
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashReset
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiEONQPIEnable
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite2
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteDisable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiReadID
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite1
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusRead
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseAll
</UL>

<P><STRONG><a name="[87]"></a>spiSSDisable</STRONG> (ARM, 44 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashExit4ByteMode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEnter4ByteMode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiEONFlashFastReadQuad
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiEONFlashQuadWrite
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashFastReadQuad
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashQuadWrite
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashWrite
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseBlock
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseSector
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashReset
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiEONQPIEnable
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite2
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteDisable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiReadID
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite1
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusRead
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseAll
</UL>

<P><STRONG><a name="[64]"></a>spiTransfer</STRONG> (ARM, 1472 bytes, Stack size 56 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>

<P><STRONG><a name="[fe]"></a>spiRtosInit</STRONG> (ARM, 12 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>EDMA_SetupCST</STRONG> (ARM, 88 bytes, Stack size 24 bytes, n9h26_edma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_SetColorTransformOperation
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_SetColorTransformFormat
</UL>

<P><STRONG><a name="[68]"></a>EDMA_ClearCST</STRONG> (ARM, 32 bytes, Stack size 8 bytes, n9h26_edma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_SetColorTransformOperation
</UL>

<P><STRONG><a name="[44]"></a>EDMA_SetupSingle</STRONG> (ARM, 240 bytes, Stack size 40 bytes, n9h26_edma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EDMA_SetupSingle &rArr; DrvEDMA_SetTransferSetting
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_SetTransferSetting
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPIPDMA_Read
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPIPDMA_Write
</UL>

<P><STRONG><a name="[6a]"></a>EDMA_SetupSG</STRONG> (ARM, 364 bytes, Stack size 64 bytes, n9h26_edma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_SetScatterGatherTblStartAddr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_EnableScatterGather
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
</UL>

<P><STRONG><a name="[6e]"></a>EDMA_FreeSG</STRONG> (ARM, 100 bytes, Stack size 24 bytes, n9h26_edma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EDMA_FreeSG &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Free
</UL>

<P><STRONG><a name="[41]"></a>EDMA_SetupHandlers</STRONG> (ARM, 84 bytes, Stack size 32 bytes, n9h26_edma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EDMA_SetupHandlers &rArr; DrvEDMA_InstallCallBack &rArr; sysInstallISR &rArr; sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_InstallCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPIPDMA_Read
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPIPDMA_Write
</UL>

<P><STRONG><a name="[71]"></a>EDMA_Enable</STRONG> (ARM, 68 bytes, Stack size 16 bytes, n9h26_edma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_EnableInt
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_EnableCH
</UL>

<P><STRONG><a name="[74]"></a>EDMA_Disable</STRONG> (ARM, 36 bytes, Stack size 8 bytes, n9h26_edma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_EnableCH
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_DisableInt
</UL>

<P><STRONG><a name="[76]"></a>EDMA_Request</STRONG> (ARM, 168 bytes, Stack size 16 bytes, n9h26_edma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EDMA_Request &rArr; DrvEDMA_EnableCH
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_EnableInt
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_EnableCH
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VDMA_FindandRequest
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_FindandRequest
</UL>

<P><STRONG><a name="[4f]"></a>EDMA_Free</STRONG> (ARM, 184 bytes, Stack size 16 bytes, n9h26_edma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EDMA_Free &rArr; EDMA_FreeSG &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_EnableCH
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_DisableInt
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_ClearCHForAPBDevice
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_FreeSG
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadRead
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadWrite
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMARead
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAWrite
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSlaveTest
</UL>

<P><STRONG><a name="[78]"></a>VDMA_FindandRequest</STRONG> (ARM, 84 bytes, Stack size 8 bytes, n9h26_edma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Request
</UL>

<P><STRONG><a name="[3f]"></a>PDMA_FindandRequest</STRONG> (ARM, 100 bytes, Stack size 8 bytes, n9h26_edma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PDMA_FindandRequest &rArr; EDMA_Request &rArr; DrvEDMA_EnableCH
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPIPDMA_Read
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPIPDMA_Write
</UL>

<P><STRONG><a name="[4d]"></a>EDMA_Trigger</STRONG> (ARM, 60 bytes, Stack size 16 bytes, n9h26_edma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EDMA_Trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_CHEnablelTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadRead
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadWrite
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMARead
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAWrite
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSlaveTest
</UL>

<P><STRONG><a name="[ff]"></a>EDMA_TriggerDone</STRONG> (ARM, 24 bytes, Stack size 0 bytes, n9h26_edma.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>EDMA_IsBusy</STRONG> (ARM, 20 bytes, Stack size 8 bytes, n9h26_edma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_IsCHBusy
</UL>

<P><STRONG><a name="[3b]"></a>EDMA_Init</STRONG> (ARM, 160 bytes, Stack size 8 bytes, n9h26_edma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EDMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_Open
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_ClearCHForAPBDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>EDMA_Exit</STRONG> (ARM, 12 bytes, Stack size 8 bytes, n9h26_edma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_Close
</UL>

<P><STRONG><a name="[40]"></a>EDMA_SetAPB</STRONG> (ARM, 104 bytes, Stack size 24 bytes, n9h26_edma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EDMA_SetAPB &rArr; DrvEDMA_SetCHForAPBDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_SetCHForAPBDevice
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_SetAPBTransferWidth
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPIPDMA_Read
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPIPDMA_Write
</UL>

<P><STRONG><a name="[42]"></a>EDMA_SetWrapINTType</STRONG> (ARM, 124 bytes, Stack size 16 bytes, n9h26_edma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EDMA_SetWrapINTType
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_SetWrapIntType
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_EnableInt
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_DisableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPIPDMA_Read
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPIPDMA_Write
</UL>

<P><STRONG><a name="[43]"></a>EDMA_SetDirection</STRONG> (ARM, 80 bytes, Stack size 8 bytes, n9h26_edma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EDMA_SetDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPIPDMA_Read
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPIPDMA_Write
</UL>

<P><STRONG><a name="[7c]"></a>DrvEDMA_Open</STRONG> (ARM, 8 bytes, Stack size 0 bytes, drvedma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Init
</UL>

<P><STRONG><a name="[7e]"></a>DrvEDMA_Close</STRONG> (ARM, 48 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Exit
</UL>

<P><STRONG><a name="[7b]"></a>DrvEDMA_IsCHBusy</STRONG> (ARM, 76 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_IsBusy
</UL>

<P><STRONG><a name="[72]"></a>DrvEDMA_EnableCH</STRONG> (ARM, 244 bytes, Stack size 12 bytes, drvedma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DrvEDMA_EnableCH
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Request
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Disable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Enable
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Free
</UL>

<P><STRONG><a name="[100]"></a>DrvEDMA_IsEnabledCH</STRONG> (ARM, 56 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>DrvEDMA_DisableScatterGather</STRONG> (ARM, 24 bytes, Stack size 0 bytes, drvedma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_SetTransferSetting
</UL>

<P><STRONG><a name="[69]"></a>DrvEDMA_SetTransferSetting</STRONG> (ARM, 160 bytes, Stack size 24 bytes, drvedma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DrvEDMA_SetTransferSetting
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_DisableScatterGather
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetupSingle
</UL>

<P><STRONG><a name="[101]"></a>DrvEDMA_GetTransferSetting</STRONG> (ARM, 152 bytes, Stack size 16 bytes, drvedma.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>DrvEDMA_GetTransferLength</STRONG> (ARM, 60 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>DrvEDMA_SetAPBTransferWidth</STRONG> (ARM, 88 bytes, Stack size 0 bytes, drvedma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetAPB
</UL>

<P><STRONG><a name="[103]"></a>DrvEDMA_GetAPBTransferWidth</STRONG> (ARM, 84 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>DrvEDMA_ClearCHForAPBDevice</STRONG> (ARM, 176 bytes, Stack size 0 bytes, drvedma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Free
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Init
</UL>

<P><STRONG><a name="[80]"></a>DrvEDMA_SetCHForAPBDevice</STRONG> (ARM, 1016 bytes, Stack size 28 bytes, drvedma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DrvEDMA_SetCHForAPBDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetAPB
</UL>

<P><STRONG><a name="[104]"></a>DrvEDMA_GetCHForAPBDevice</STRONG> (ARM, 208 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>DrvEDMA_SetWrapIntType</STRONG> (ARM, 100 bytes, Stack size 0 bytes, drvedma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetWrapINTType
</UL>

<P><STRONG><a name="[105]"></a>DrvEDMA_GetWrapIntType</STRONG> (ARM, 76 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>DrvEDMA_CHSoftwareReset</STRONG> (ARM, 64 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>DrvEDMA_CHEnablelTransfer</STRONG> (ARM, 68 bytes, Stack size 0 bytes, drvedma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Trigger
</UL>

<P><STRONG><a name="[107]"></a>DrvEDMA_GetCurrentSourceAddr</STRONG> (ARM, 20 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>DrvEDMA_GetCurrentDestAddr</STRONG> (ARM, 20 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>DrvEDMA_GetCurrentTransferCount</STRONG> (ARM, 20 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>DrvEDMA_EnableInt</STRONG> (ARM, 56 bytes, Stack size 0 bytes, drvedma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Request
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Enable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetWrapINTType
</UL>

<P><STRONG><a name="[75]"></a>DrvEDMA_DisableInt</STRONG> (ARM, 24 bytes, Stack size 0 bytes, drvedma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Disable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetWrapINTType
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Free
</UL>

<P><STRONG><a name="[10a]"></a>DrvEDMA_IsIntEnabled</STRONG> (ARM, 128 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>DrvEDMA_ClearInt</STRONG> (ARM, 16 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>DrvEDMA_PollInt</STRONG> (ARM, 28 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>DrvEDMA_SetColorTransformFormat</STRONG> (ARM, 88 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetupCST
</UL>

<P><STRONG><a name="[10d]"></a>DrvEDMA_GetColorTransformFormat</STRONG> (ARM, 44 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>DrvEDMA_SetColorTransformOperation</STRONG> (ARM, 84 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_ClearCST
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetupCST
</UL>

<P><STRONG><a name="[10e]"></a>DrvEDMA_GetColorTransformOperation</STRONG> (ARM, 40 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>DrvEDMA_SetSourceStride</STRONG> (ARM, 68 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>DrvEDMA_GetSourceStride</STRONG> (ARM, 40 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>DrvEDMA_SetDestinationStrideOffset</STRONG> (ARM, 72 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>DrvEDMA_GetDestinationStrideOffset</STRONG> (ARM, 28 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>DrvEDMA_SetClamping</STRONG> (ARM, 148 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>DrvEDMA_GetClamping</STRONG> (ARM, 28 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>DrvEDMA_GetInternalBufPointer</STRONG> (ARM, 28 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>DrvEDMA_GetSharedBufData</STRONG> (ARM, 24 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>DrvEDMA_ISR</STRONG> (ARM, 2028 bytes, Stack size 16 bytes, drvedma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrvEDMA_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvedma.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>DrvEDMA1_ISR</STRONG> (ARM, 1896 bytes, Stack size 16 bytes, drvedma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrvEDMA1_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drvedma.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>DrvEDMA_InstallCallBack</STRONG> (ARM, 272 bytes, Stack size 32 bytes, drvedma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DrvEDMA_InstallCallBack &rArr; sysInstallISR &rArr; sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetInterruptType
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetupHandlers
</UL>

<P><STRONG><a name="[117]"></a>DrvEDMA_GetScatterGatherInfo</STRONG> (ARM, 20 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>DrvEDMA_SetScatterGatherTblStartAddr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_SetScatterGatherSetting
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetupSG
</UL>

<P><STRONG><a name="[6c]"></a>DrvEDMA_EnableScatterGather</STRONG> (ARM, 24 bytes, Stack size 0 bytes, drvedma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_SetScatterGatherSetting
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetupSG
</UL>

<P><STRONG><a name="[84]"></a>DrvEDMA_SetScatterGatherSetting</STRONG> (ARM, 1040 bytes, Stack size 80 bytes, drvedma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_SetScatterGatherTblStartAddr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_EnableScatterGather
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[51]"></a>usiCheckBusy</STRONG> (ARM, 184 bytes, Stack size 16 bytes, spiflash_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSDisable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSEnable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashWrite
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseBlock
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseSector
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashReset
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite2
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite1
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseAll
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashQuadTest
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadWrite
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashTest
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAWrite
</UL>

<P><STRONG><a name="[88]"></a>usiReadID</STRONG> (ARM, 216 bytes, Stack size 16 bytes, spiflash_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSDisable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSEnable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
</UL>

<P><STRONG><a name="[49]"></a>usiWriteEnable</STRONG> (ARM, 92 bytes, Stack size 16 bytes, spiflash_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSDisable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSEnable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiEONFlashQuadWrite
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashQuadWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashWrite
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseBlock
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseSector
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite2
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite1
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusRead
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashEraseAll
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadWrite
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAWrite
</UL>

<P><STRONG><a name="[89]"></a>usiWriteDisable</STRONG> (ARM, 92 bytes, Stack size 16 bytes, spiflash_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSDisable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSEnable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>

<P><STRONG><a name="[8a]"></a>usiStatusWrite</STRONG> (ARM, 148 bytes, Stack size 16 bytes, spiflash_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSDisable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSEnable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashReset
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
</UL>

<P><STRONG><a name="[47]"></a>usiStatusWrite1</STRONG> (ARM, 204 bytes, Stack size 24 bytes, spiflash_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSDisable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSEnable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadRead
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadWrite
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMARead
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAWrite
</UL>

<P><STRONG><a name="[8b]"></a>usiStatusWrite2</STRONG> (ARM, 160 bytes, Stack size 16 bytes, spiflash_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSDisable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSEnable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>

<P><STRONG><a name="[48]"></a>usiStatusRead</STRONG> (ARM, 172 bytes, Stack size 24 bytes, spiflash_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSDisable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSEnable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadRead
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadWrite
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMARead
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAWrite
</UL>

<P><STRONG><a name="[8c]"></a>usiEONQPIEnable</STRONG> (ARM, 92 bytes, Stack size 16 bytes, spiflash_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSDisable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSEnable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiEONFlashFastReadQuad
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiEONFlashQuadWrite
</UL>

<P><STRONG><a name="[54]"></a>spiFlashInit</STRONG> (ARM, 336 bytes, Stack size 24 bytes, spiflash_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiReadID
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetAPBClock
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIoctl
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashQuadTest
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashTest
</UL>

<P><STRONG><a name="[8d]"></a>spiFlashReset</STRONG> (ARM, 200 bytes, Stack size 16 bytes, spiflash_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiStatusWrite
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSDisable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSEnable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>

<P><STRONG><a name="[8f]"></a>spiFlashEraseSector</STRONG> (ARM, 372 bytes, Stack size 24 bytes, spiflash_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSDisable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSEnable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>

<P><STRONG><a name="[90]"></a>spiFlashEraseBlock</STRONG> (ARM, 296 bytes, Stack size 24 bytes, spiflash_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSDisable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSEnable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>

<P><STRONG><a name="[55]"></a>spiFlashEraseAll</STRONG> (ARM, 116 bytes, Stack size 16 bytes, spiflash_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSDisable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSEnable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashQuadTest
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashTest
</UL>

<P><STRONG><a name="[91]"></a>spiFlashWrite</STRONG> (ARM, 608 bytes, Stack size 48 bytes, spiflash_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSDisable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSEnable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiCheckBusy
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSetByteEndin
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>

<P><STRONG><a name="[92]"></a>spiFlashRead</STRONG> (ARM, 452 bytes, Stack size 40 bytes, spiflash_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSDisable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSEnable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSetByteEndin
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>

<P><STRONG><a name="[93]"></a>spiFlashQuadWrite</STRONG> (ARM, 832 bytes, Stack size 48 bytes, spiflash_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSDisable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSEnable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSetByteEndin
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>

<P><STRONG><a name="[94]"></a>spiFlashFastReadQuad</STRONG> (ARM, 580 bytes, Stack size 40 bytes, spiflash_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSDisable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSEnable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSetByteEndin
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>

<P><STRONG><a name="[95]"></a>spiEONFlashQuadWrite</STRONG> (ARM, 856 bytes, Stack size 48 bytes, spiflash_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiEONQPIEnable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSDisable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSEnable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiWriteEnable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSetByteEndin
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>

<P><STRONG><a name="[96]"></a>spiEONFlashFastReadQuad</STRONG> (ARM, 672 bytes, Stack size 40 bytes, spiflash_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usiEONQPIEnable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSDisable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSEnable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSetByteEndin
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>

<P><STRONG><a name="[97]"></a>spiFlashEnter4ByteMode</STRONG> (ARM, 104 bytes, Stack size 16 bytes, spiflash_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSDisable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSEnable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>

<P><STRONG><a name="[98]"></a>spiFlashExit4ByteMode</STRONG> (ARM, 100 bytes, Stack size 16 bytes, spiflash_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSDisable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSSEnable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxLen
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiActive
</UL>

<P><STRONG><a name="[99]"></a>sysIrqHandler</STRONG> (ARM, 308 bytes, Stack size 32 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sysIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_aic.o(.text)
</UL>
<P><STRONG><a name="[9a]"></a>sysFiqHandler</STRONG> (ARM, 308 bytes, Stack size 32 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sysFiqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_aic.o(.text)
</UL>
<P><STRONG><a name="[9]"></a>WB_Interrupt_Shell</STRONG> (ARM, 4 bytes, Stack size 0 bytes, wb_aic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wb_aic.o(.data)
</UL>
<P><STRONG><a name="[9b]"></a>sysInitializeAIC</STRONG> (ARM, 60 bytes, Stack size 8 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheState
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
</UL>

<P><STRONG><a name="[61]"></a>sysDisableInterrupt</STRONG> (ARM, 84 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStopTimer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiClose
</UL>

<P><STRONG><a name="[5e]"></a>sysEnableInterrupt</STRONG> (ARM, 84 bytes, Stack size 0 bytes, wb_aic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallWatchDogTimerISR
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_InstallCallBack
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInstallCallBack
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
</UL>

<P><STRONG><a name="[118]"></a>sysInstallExceptionHandler</STRONG> (ARM, 136 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>sysInstallFiqHandler</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>sysInstallIrqHandler</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>sysInstallISR</STRONG> (ARM, 328 bytes, Stack size 24 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sysInstallISR &rArr; sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeAIC
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallWatchDogTimerISR
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStopTimer
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_InstallCallBack
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInstallCallBack
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
</UL>

<P><STRONG><a name="[11b]"></a>sysSetGlobalInterrupt</STRONG> (ARM, 100 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>sysSetInterruptPriorityLevel</STRONG> (ARM, 196 bytes, Stack size 16 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>sysSetInterruptType</STRONG> (ARM, 152 bytes, Stack size 12 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysSetInterruptType
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_InstallCallBack
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
</UL>

<P><STRONG><a name="[36]"></a>sysSetLocalInterrupt</STRONG> (ARM, 140 bytes, Stack size 0 bytes, wb_aic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallWatchDogTimerISR
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Request
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInstallCallBack
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetAPB
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11d]"></a>sysSetAIC2SWMode</STRONG> (ARM, 16 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>sysGetInterruptEnableStatus</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>sysGetInterruptHighEnableStatus</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>sysGetIBitState</STRONG> (ARM, 28 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>sysGetSdramSizebyMB</STRONG> (ARM, 408 bytes, Stack size 12 bytes, wb_cache.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>sysEnableCache</STRONG> (ARM, 44 bytes, Stack size 8 bytes, wb_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sysEnableCache &rArr; sysInitMMUTable
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMMUTable
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysClockSwitchStart
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>sysDisableCache</STRONG> (ARM, 88 bytes, Stack size 8 bytes, wb_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysDisableCache
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysClockSwitchStart
</UL>

<P><STRONG><a name="[9d]"></a>sysFlushCache</STRONG> (ARM, 112 bytes, Stack size 16 bytes, wb_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysClockSwitchStart
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeAIC
</UL>

<P><STRONG><a name="[122]"></a>sysInvalidCache</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_cache.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>sysGetCacheState</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_cache.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysClockSwitchStart
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeAIC
</UL>

<P><STRONG><a name="[a5]"></a>sysGetCacheMode</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_cache.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysClockSwitchStart
</UL>

<P><STRONG><a name="[123]"></a>_sysLockCode</STRONG> (ARM, 200 bytes, Stack size 16 bytes, wb_cache.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>_sysUnLockCode</STRONG> (ARM, 40 bytes, Stack size 8 bytes, wb_cache.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>sysGetPLLOutputHz</STRONG> (ARM, 164 bytes, Stack size 56 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = sysGetPLLOutputHz
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetPllClock
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSystemClock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetDramClock
</UL>

<P><STRONG><a name="[125]"></a>sysCheckPllConstraint</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_config.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>_sysGetPLLControlRegister</STRONG> (ARM, 292 bytes, Stack size 56 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _sysGetPLLControlRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetPllClock
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
</UL>

<P><STRONG><a name="[126]"></a>sysSetPLLControlRegister</STRONG> (ARM, 40 bytes, Stack size 0 bytes, wb_config.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>_sysClockSwitch</STRONG> (ARM, 344 bytes, Stack size 24 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sysClockSwitch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_config.o(.text)
</UL>
<P><STRONG><a name="[a3]"></a>_sysClockSwitchStart</STRONG> (ARM, 180 bytes, Stack size 56 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheMode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableCache
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheState
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableCache
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2f]"></a>sysGetExternalClock</STRONG> (ARM, 24 bytes, Stack size 0 bytes, wb_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetPllClock
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSystemClock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetDramClock
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
</UL>

<P><STRONG><a name="[a6]"></a>sysGetDramClock</STRONG> (ARM, 88 bytes, Stack size 8 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = sysGetDramClock &rArr; sysGetPLLOutputHz
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputHz
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
</UL>

<P><STRONG><a name="[a7]"></a>sysGetSystemClock</STRONG> (ARM, 200 bytes, Stack size 32 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = sysGetSystemClock &rArr; sysGetPLLOutputHz
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputHz
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetCPUClock
</UL>

<P><STRONG><a name="[a8]"></a>sysGetCPUClock</STRONG> (ARM, 48 bytes, Stack size 16 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = sysGetCPUClock &rArr; sysGetSystemClock &rArr; sysGetPLLOutputHz
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSystemClock
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK1Clock
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
</UL>

<P><STRONG><a name="[32]"></a>sysSetSystemClock</STRONG> (ARM, 1236 bytes, Stack size 72 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = sysSetSystemClock &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetDramClock
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysGetPLLControlRegister
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>sysSetCPUClock</STRONG> (ARM, 144 bytes, Stack size 24 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = sysSetCPUClock &rArr; sysGetSystemClock &rArr; sysGetPLLOutputHz
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSystemClock
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>sysGetHCLK1Clock</STRONG> (ARM, 48 bytes, Stack size 16 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = sysGetHCLK1Clock &rArr; sysGetCPUClock &rArr; sysGetSystemClock &rArr; sysGetPLLOutputHz
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK234Clock
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetAPBClock
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetAPBClock
</UL>

<P><STRONG><a name="[34]"></a>sysSetAPBClock</STRONG> (ARM, 168 bytes, Stack size 16 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = sysSetAPBClock &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK1Clock
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>sysGetHCLK234Clock</STRONG> (ARM, 44 bytes, Stack size 16 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = sysGetHCLK234Clock &rArr; sysGetHCLK1Clock &rArr; sysGetCPUClock &rArr; sysGetSystemClock &rArr; sysGetPLLOutputHz
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK1Clock
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
</UL>

<P><STRONG><a name="[2c]"></a>sysGetAPBClock</STRONG> (ARM, 44 bytes, Stack size 16 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = sysGetAPBClock &rArr; sysGetHCLK1Clock &rArr; sysGetCPUClock &rArr; sysGetSystemClock &rArr; sysGetPLLOutputHz
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK1Clock
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInit
</UL>

<P><STRONG><a name="[ab]"></a>sysSetPllClock</STRONG> (ARM, 400 bytes, Stack size 32 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysGetPLLControlRegister
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputHz
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[14]"></a>_dramClockSwitch</STRONG> (ARM, 2916 bytes, Stack size 44 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _dramClockSwitch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_config.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>_dramClockSwitchStart</STRONG> (ARM, 376 bytes, Stack size 64 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = _dramClockSwitchStart &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheMode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableCache
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheState
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableCache
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
</UL>

<P><STRONG><a name="[31]"></a>sysSetDramClock</STRONG> (ARM, 596 bytes, Stack size 48 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = sysSetDramClock &rArr; _dramClockSwitchStart &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartPort
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK234Clock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysGetPLLControlRegister
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15]"></a>sysTimerISR</STRONG> (ARM, 1016 bytes, Stack size 8 bytes, wb_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysTimerISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_timer.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>sysGetTicks</STRONG> (ARM, 124 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>

<P><STRONG><a name="[127]"></a>sysResetTicks</STRONG> (ARM, 140 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>sysUpdateTickCount</STRONG> (ARM, 124 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>sysSetTimerReferenceClock</STRONG> (ARM, 124 bytes, Stack size 0 bytes, wb_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>sysStartTimer</STRONG> (ARM, 1120 bytes, Stack size 24 bytes, wb_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetInterruptType
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>sysStopTimer</STRONG> (ARM, 700 bytes, Stack size 8 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableInterrupt
</UL>

<P><STRONG><a name="[129]"></a>sysClearWatchDogTimerCount</STRONG> (ARM, 36 bytes, Stack size 8 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>sysClearWatchDogTimerInterruptStatus</STRONG> (ARM, 36 bytes, Stack size 8 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>sysDisableWatchDogTimer</STRONG> (ARM, 36 bytes, Stack size 8 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>sysDisableWatchDogTimerReset</STRONG> (ARM, 36 bytes, Stack size 8 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>sysEnableWatchDogTimer</STRONG> (ARM, 36 bytes, Stack size 8 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>sysEnableWatchDogTimerReset</STRONG> (ARM, 36 bytes, Stack size 8 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>sysInstallWatchDogTimerISR</STRONG> (ARM, 92 bytes, Stack size 24 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
</UL>

<P><STRONG><a name="[12f]"></a>sysSetWatchDogTimerInterval</STRONG> (ARM, 60 bytes, Stack size 8 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>sysSetTimerEvent</STRONG> (ARM, 852 bytes, Stack size 16 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>sysClearTimerEvent</STRONG> (ARM, 340 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>sysDOS_Time_To_UTC</STRONG> (ARM, 300 bytes, Stack size 16 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalTime
</UL>

<P><STRONG><a name="[b0]"></a>sysUTC_To_DOS_Time</STRONG> (ARM, 320 bytes, Stack size 24 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCurrentTime
</UL>

<P><STRONG><a name="[b1]"></a>sysSetLocalTime</STRONG> (ARM, 64 bytes, Stack size 28 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDOS_Time_To_UTC
</UL>

<P><STRONG><a name="[b3]"></a>sysGetCurrentTime</STRONG> (ARM, 68 bytes, Stack size 16 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUTC_To_DOS_Time
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[8e]"></a>sysDelay</STRONG> (ARM, 96 bytes, Stack size 16 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashReset
</UL>

<P><STRONG><a name="[ad]"></a>sysUartPort</STRONG> (ARM, 160 bytes, Stack size 0 bytes, wb_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
</UL>

<P><STRONG><a name="[132]"></a>sysUartInstallcallback</STRONG> (ARM, 76 bytes, Stack size 0 bytes, wb_uart.o(.text), UNUSED)

<P><STRONG><a name="[16]"></a>sysUartISR</STRONG> (ARM, 756 bytes, Stack size 24 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sysUartISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_uart.o(.text)
</UL>
<P><STRONG><a name="[133]"></a>sysUartEnableInt</STRONG> (ARM, 148 bytes, Stack size 0 bytes, wb_uart.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>sysInitializeUART</STRONG> (ARM, 528 bytes, Stack size 16 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = sysInitializeUART &rArr; sysInstallISR &rArr; sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetBaudRate
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartPort
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
</UL>

<P><STRONG><a name="[b7]"></a>_PutChar_f</STRONG> (ARM, 440 bytes, Stack size 0 bytes, wb_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutStringReverse
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutRepChar
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutString
</UL>

<P><STRONG><a name="[b6]"></a>sysPutString</STRONG> (ARM, 40 bytes, Stack size 8 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysPutString
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>

<P><STRONG><a name="[bd]"></a>sysPrintf</STRONG> (ARM, 204 bytes, Stack size 40 bytes, wb_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartPort
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>

<P><STRONG><a name="[39]"></a>sysprintf</STRONG> (ARM, 284 bytes, Stack size 40 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartPort
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashQuadTest
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadRead
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAQuadWrite
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashTest
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMARead
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashPDMAWrite
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPIPDMA_Read
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCallback_SPI
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetAPBClock
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSlaveTest
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiOpen
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>sysGetChar</STRONG> (ARM, 52 bytes, Stack size 0 bytes, wb_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[134]"></a>sysPutChar</STRONG> (ARM, 48 bytes, Stack size 0 bytes, wb_uart.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>sysUartTransfer</STRONG> (ARM, 68 bytes, Stack size 0 bytes, wb_uart.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>sysSetMMUMappingMethod</STRONG> (ARM, 8 bytes, Stack size 0 bytes, wb_mmu.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>sysInitMMUTable</STRONG> (ARM, 168 bytes, Stack size 8 bytes, wb_mmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysInitMMUTable
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetupCP15
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableCache
</UL>

<P><STRONG><a name="[6b]"></a>malloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetupSG (via BLX)
</UL>

<P><STRONG><a name="[6f]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_FreeSG (via BLX)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[bc]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem (via BLX)
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysClockSwitchStart
</UL>

<P><STRONG><a name="[c1]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[137]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__aeabi_idivmod</STRONG> (ARM, 380 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSetClock
</UL>

<P><STRONG><a name="[bf]"></a>__rt_heap_descriptor</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (via BLX)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
</UL>

<P><STRONG><a name="[139]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[c5]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1e]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_escrow
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[c8]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[13f]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[c6]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[c7]"></a>__rt_heap_escrow</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, heapauxa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[c3]"></a>__rt_heap_expand</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, heapauxa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_heap_expand
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[20]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __user_setup_stackheap &rArr; __user_initial_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[24]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via BLX)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ca]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[c9]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[cf]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[140]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[85]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetBaudRate
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCurrentTime
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUTC_To_DOS_Time
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetPllClock
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK234Clock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSystemClock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetDramClock
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysGetPLLControlRegister
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputHz
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvEDMA_SetScatterGatherSetting
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashInit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetCPUClock
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetAPBClock
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetAPBClock
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b]"></a>Undefined_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[c]"></a>SWI_Handler1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler1
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[d]"></a>Prefetch_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prefetch_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prefetch_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[e]"></a>Abort_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abort_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abort_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[f]"></a>IRQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[10]"></a>FIQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[b5]"></a>sysSetBaudRate</STRONG> (ARM, 56 bytes, Stack size 16 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = sysSetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
</UL>

<P><STRONG><a name="[b8]"></a>sysPutRepChar</STRONG> (ARM, 40 bytes, Stack size 12 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysPutRepChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
</UL>

<P><STRONG><a name="[b9]"></a>sysPutStringReverse</STRONG> (ARM, 40 bytes, Stack size 12 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
</UL>

<P><STRONG><a name="[ba]"></a>sysPutNumber</STRONG> (ARM, 444 bytes, Stack size 80 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutStringReverse
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutRepChar
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>

<P><STRONG><a name="[bb]"></a>FormatItem</STRONG> (ARM, 540 bytes, Stack size 40 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutRepChar
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutString
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
</UL>

<P><STRONG><a name="[d3]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[d2]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[d1]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[d4]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[cd]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
